const baseBet = 100
const baseTarget = 5
const increaseAfterX = 5
const targetIncrease = 1
const increaseBy = 1
const decoyTarget = 5
const waitForXunderTarget = 10
const pausePerBetMilliseconds   = 750      // Slow script in milliseconds if need


let consecutiveLosses = 0
let bet = baseBet
let target = baseTarget
let redStreak = 0  

while (true) {
    if (pausePerBetMilliseconds != 0){await sleep(pausePerBetMilliseconds)}            // Slow down script if necessary.

    const { multiplier } = await this.skip(bet, target)
    
    if (multiplier < decoyTarget) {
        redStreak++
        await this.log(`Under decoy #${redStreak}`)
    } else {
        redStreak = 0
    }
    
    while(redStreak >= waitForXunderTarget) {
    if (pausePerBetMilliseconds != 0){await sleep(pausePerBetMilliseconds)}            // Slow down script if necessary.

        this.log(`Red streak hit on skips, starting betting.`)
        const { multiplier } = await this.bet(bet, target)
        await sleep(0)

        if (multiplier < target) { // loss
            consecutiveLosses++
            redStreak++
            await this.log(`Lost consecutive bet #${consecutiveLosses}`)
console.log("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
            if (consecutiveLosses % increaseAfterX === 0) {
                bet *= increaseBy
                target = baseTarget
            } else {
                target += targetIncrease
            }

        } else { // win
            redStreak = 0
            consecutiveLosses = 0
            bet = baseBet
            target = baseTarget
            await this.log("Won bet")
console.log("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        }
    }
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
}
