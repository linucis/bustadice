const baseBet =     100                     // Starting Bet
const baseTarget =     1.1                  // Starting Multiplier
const increaseAfterX =     1                // Increase after X
const targetIncrease =     1.1              // + Add to Target
const increaseBy =     1                    // Multiply Bet By
const decoyTarget =     0                   // Decoy Target
const waitForXunderTarget =     0
const pausePerBetMilliseconds =      50     // Slow script in milliseconds



let consecutiveLosses =     0
let endScript =     1000                    // End the script if we hit (X) consecutive losses
let bet =     baseBet
let target =     baseTarget
let redStreak =     0  



while (true) {        
    const { multiplier } = await this.skip(bet, target)
    if (multiplier < decoyTarget) {
        redStreak++
        await this.log(`Decoy Skip #${redStreak}`)
    } else {
        redStreak = 0
    }
    
while(redStreak >= waitForXunderTarget) {
    if (pausePerBetMilliseconds != 0){await sleep(pausePerBetMilliseconds)} 
    
        const { multiplier } = await this.bet(bet, target)
        await sleep(0)

    if (multiplier < target) { // loss
            consecutiveLosses++
            redStreak++
            await this.log(`Loss #${consecutiveLosses}`)
console.log("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
            if (consecutiveLosses % increaseAfterX === 0) {
                bet *= increaseBy
                target = baseTarget
                target += targetIncrease
}

//restart the script if we hit the limit! <--------------ADD THIS
if (consecutiveLosses >= endScript){
    redStreak = 0
            consecutiveLosses = 0
            bet = baseBet
            target = baseTarget
            await this.log("Dead Run, Restarting Decoy...")
console.log("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        }
        } else { // win
            redStreak = 0
            consecutiveLosses = 0
            bet = baseBet
            target = baseTarget
            await this.log("Won bet")
console.log("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        }
    }
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms))
}
